package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/odigos-io/odigos/frontend/endpoints"
	"github.com/odigos-io/odigos/frontend/graph/model"
	"github.com/odigos-io/odigos/frontend/kube"
	"github.com/odigos-io/odigos/frontend/services"
	"github.com/odigos-io/odigos/k8sutils/pkg/workload"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// K8sActualNamespace is the resolver for the k8sActualNamespace field.
func (r *computePlatformResolver) K8sActualNamespace(ctx context.Context, obj *model.ComputePlatform, name string) (*model.K8sActualNamespace, error) {
	namespaceActualSources, err := services.GetWorkloadsInNamespace(ctx, name, nil)
	if err != nil {
		return nil, err
	}

	// Convert namespaceActualSources to []*model.K8sActualSource
	namespaceActualSourcesPointers := make([]*model.K8sActualSource, len(namespaceActualSources))
	for i, source := range namespaceActualSources {
		namespaceActualSourcesPointers[i] = &source
	}

	namespace, err := kube.DefaultClient.CoreV1().Namespaces().Get(ctx, name, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	nsInstrumented := workload.GetInstrumentationLabelValue(namespace.GetLabels())

	return &model.K8sActualNamespace{
		Name:                        name,
		InstrumentationLabelEnabled: nsInstrumented,
		K8sActualSources:            namespaceActualSourcesPointers,
	}, nil
}

// K8sActualSource is the resolver for the k8sActualSource field.
func (r *computePlatformResolver) K8sActualSource(ctx context.Context, obj *model.ComputePlatform, name *string, namespace *string, kind *string) (*model.K8sActualSource, error) {
	source, err := services.GetActualSource(ctx, *namespace, *kind, *name)
	if err != nil {
		return nil, err
	}
	if source == nil {
		return nil, nil
	}
	k8sActualSource := k8sSourceToGql(source)

	return k8sActualSource, nil
}

// Type is the resolver for the type field.
func (r *destinationResolver) Type(ctx context.Context, obj *model.Destination) (string, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Fields is the resolver for the fields field.
func (r *destinationResolver) Fields(ctx context.Context, obj *model.Destination) ([]string, error) {
	panic(fmt.Errorf("not implemented: Fields - fields"))
}

// Conditions is the resolver for the conditions field.
func (r *destinationResolver) Conditions(ctx context.Context, obj *model.Destination) ([]*model.Condition, error) {
	panic(fmt.Errorf("not implemented: Conditions - conditions"))
}

// Type is the resolver for the type field.
func (r *destinationTypesCategoryItemResolver) Type(ctx context.Context, obj *model.DestinationTypesCategoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// K8sActualSources is the resolver for the k8sActualSources field.
func (r *k8sActualNamespaceResolver) K8sActualSources(ctx context.Context, obj *model.K8sActualNamespace, instrumentationLabeled *bool) ([]*model.K8sActualSource, error) {
	return obj.K8sActualSources, nil
}

// CreateK8sDesiredNamespace is the resolver for the createK8sDesiredNamespace field.
func (r *mutationResolver) CreateK8sDesiredNamespace(ctx context.Context, cpID string, namespace model.K8sDesiredNamespaceInput) (*model.K8sActualNamespace, error) {
	panic(fmt.Errorf("not implemented: CreateK8sDesiredNamespace - createK8sDesiredNamespace"))
}

// ComputePlatform is the resolver for the computePlatform field.
func (r *queryResolver) ComputePlatform(ctx context.Context) (*model.ComputePlatform, error) {
	namespacesResponse := services.GetK8SNamespaces(ctx)

	K8sActualNamespaces := make([]*model.K8sActualNamespace, len(namespacesResponse.Namespaces))
	for i, namespace := range namespacesResponse.Namespaces {
		K8sActualNamespaces[i] = &model.K8sActualNamespace{
			Name: namespace.Name,
		}
	}

	return &model.ComputePlatform{
		ComputePlatformType: model.ComputePlatformTypeK8s,
		K8sActualNamespaces: K8sActualNamespaces,
	}, nil
}

// Config is the resolver for the config field.
func (r *queryResolver) Config(ctx context.Context) (*model.GetConfigResponse, error) {
	response := endpoints.GetConfig(ctx)

	gqlResponse := &model.GetConfigResponse{
		Installation: model.InstallationStatus(response.Installation),
	}

	return gqlResponse, nil
}

// DestinationTypes is the resolver for the destinationTypes field.
func (r *queryResolver) DestinationTypes(ctx context.Context) (*model.GetDestinationTypesResponse, error) {

	destTypes := services.GetDestinationTypes()

	return &destTypes, nil

}

// ComputePlatform returns ComputePlatformResolver implementation.
func (r *Resolver) ComputePlatform() ComputePlatformResolver { return &computePlatformResolver{r} }

// Destination returns DestinationResolver implementation.
func (r *Resolver) Destination() DestinationResolver { return &destinationResolver{r} }

// DestinationTypesCategoryItem returns DestinationTypesCategoryItemResolver implementation.
func (r *Resolver) DestinationTypesCategoryItem() DestinationTypesCategoryItemResolver {
	return &destinationTypesCategoryItemResolver{r}
}

// K8sActualNamespace returns K8sActualNamespaceResolver implementation.
func (r *Resolver) K8sActualNamespace() K8sActualNamespaceResolver {
	return &k8sActualNamespaceResolver{r}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type computePlatformResolver struct{ *Resolver }
type destinationResolver struct{ *Resolver }
type destinationTypesCategoryItemResolver struct{ *Resolver }
type k8sActualNamespaceResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
