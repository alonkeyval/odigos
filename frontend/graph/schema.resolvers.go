package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/odigos-io/odigos/frontend/endpoints"
	"github.com/odigos-io/odigos/frontend/graph/model"
	"github.com/odigos-io/odigos/frontend/services"
)

// K8sActualNamespace is the resolver for the k8sActualNamespace field.
func (r *computePlatformResolver) K8sActualNamespace(ctx context.Context, obj *model.ComputePlatform, name string) (*model.K8sActualNamespace, error) {
	namespaceActualSources := services.GetApplicationsInK8SNamespace(ctx, name)
	namespaceSources := make([]*model.K8sActualSource, len(namespaceActualSources))
	for i, source := range namespaceActualSources {
		namespaceSources[i] = k8sApplicationItemToGql(&source)
	}

	return &model.K8sActualNamespace{
		Name:             name,
		K8sActualSources: namespaceSources,
	}, nil
}

// K8sActualSource is the resolver for the k8sActualSource field.
func (r *computePlatformResolver) K8sActualSource(ctx context.Context, obj *model.ComputePlatform, name *string, namespace *string, kind *string) (*model.K8sActualSource, error) {
	source, err := services.GetActualSource(ctx, *namespace, *kind, *name)
	if err != nil {
		return nil, err
	}
	if source == nil {
		return nil, nil
	}
	k8sActualSource := k8sSourceToGql(source)

	return k8sActualSource, nil
}

// CreateK8sDesiredNamespace is the resolver for the createK8sDesiredNamespace field.
func (r *mutationResolver) CreateK8sDesiredNamespace(ctx context.Context, cpID string, namespace model.K8sDesiredNamespaceInput) (*model.K8sActualNamespace, error) {
	panic(fmt.Errorf("not implemented: CreateK8sDesiredNamespace - createK8sDesiredNamespace"))
}

// ComputePlatform is the resolver for the computePlatform field.
func (r *queryResolver) ComputePlatform(ctx context.Context) (*model.ComputePlatform, error) {
	k8sActualSources := services.GetActualSources(ctx, "odigos-system")
	res := make([]*model.K8sActualSource, len(k8sActualSources))
	for i, source := range k8sActualSources {
		res[i] = k8sThinSourceToGql(&source)
	}

	name := "odigos-system"
	namespacesResponse := services.GetK8SNamespaces(ctx, name)

	K8sActualNamespaces := make([]*model.K8sActualNamespace, len(namespacesResponse.Namespaces))

	for i, namespace := range namespacesResponse.Namespaces {
		namespaceActualSources := services.GetApplicationsInK8SNamespace(ctx, namespace.Name)
		namespaceSources := make([]*model.K8sActualSource, len(namespaceActualSources))
		for j, source := range namespaceActualSources {
			namespaceSources[j] = k8sApplicationItemToGql(&source)
		}

		K8sActualNamespaces[i] = &model.K8sActualNamespace{
			Name:             namespace.Name,
			K8sActualSources: namespaceSources,
		}
	}

	return &model.ComputePlatform{
		K8sActualSources:    res,
		Name:                &name,
		ComputePlatformType: model.ComputePlatformTypeK8s,
		K8sActualNamespaces: K8sActualNamespaces,
	}, nil
}

// Config is the resolver for the config field.
func (r *queryResolver) Config(ctx context.Context) (*model.GetConfigResponse, error) {
	response := endpoints.GetConfig(ctx)

	gqlResponse := &model.GetConfigResponse{
		Installation: model.InstallationStatus(response.Installation),
	}

	return gqlResponse, nil
}

// ComputePlatform returns ComputePlatformResolver implementation.
func (r *Resolver) ComputePlatform() ComputePlatformResolver { return &computePlatformResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type computePlatformResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
